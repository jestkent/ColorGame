<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Color Sync: AI-Powered Memory Challenge</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen flex flex-col items-center justify-center p-4 overflow-hidden">
    <div id="app" class="w-full max-w-md">
        <div class="bg-white shadow-2xl rounded-2xl p-6 relative overflow-hidden">
            <div class="absolute top-4 right-4 flex items-center space-x-2">
                <div id="ai-hint" class="bg-purple-500 text-white px-3 py-1 rounded-full text-sm font-bold cursor-pointer hover:bg-purple-600 transition">
                    AI Hint
                </div>
                <div id="level-indicator" class="bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                    Level 1
                </div>
            </div>

            <h1 class="text-3xl font-bold text-center text-gray-800 mb-4">Color Sync</h1>

            <div class="grid grid-cols-3 gap-4 mb-6">
                <div class="bg-white shadow-md rounded-lg p-3 text-center">
                    <h3 class="text-xs text-gray-500 uppercase">Score</h3>
                    <p id="score" class="text-2xl font-bold text-blue-600">0</p>
                </div>
                <div class="bg-white shadow-md rounded-lg p-3 text-center">
                    <h3 class="text-xs text-gray-500 uppercase">Time</h3>
                    <p id="timer" class="text-2xl font-bold text-green-600">30</p>
                </div>
                <div class="bg-white shadow-md rounded-lg p-3 text-center">
                    <h3 class="text-xs text-gray-500 uppercase">Best</h3>
                    <p id="best-score" class="text-2xl font-bold text-purple-600">0</p>
                </div>
            </div>

            <div class="relative mb-6">
                <div id="target-color" class="w-32 h-32 mx-auto rounded-2xl shadow-2xl mb-4 flex items-center justify-center">
                    <span id="target-text" class="text-white font-bold text-2xl"></span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
                </div>
            </div>

            <div id="grid" class="grid grid-cols-4 gap-3"></div>

            <div class="flex justify-center mt-6 space-x-4">
                <button id="new-game-btn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-full transition transform hover:-translate-y-1 hover:scale-110">
                    New Game
                </button>
            </div>
        </div>
    </div>

    <div id="modal-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
        <div id="modal" class="bg-white rounded-2xl p-8 max-w-md w-full text-center transform transition-all">
            <h2 id="modal-title" class="text-3xl font-bold mb-4"></h2>
            <p id="modal-description" class="mb-6 text-gray-600"></p>
            <div id="modal-score" class="text-5xl font-bold text-blue-600 mb-6"></div>
            <button id="modal-action" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-full transition transform hover:-translate-y-1 hover:scale-110"></button>
        </div>
    </div>

    <script>
        // Most of the original game logic remains the same, with these key enhancements:
        
        // AI Hint mechanism
        const aiHintBtn = document.getElementById('ai-hint');
        aiHintBtn.addEventListener('click', provideAIHint);

        function provideAIHint() {
            // Simple AI hint mechanism
            const unmatchedCards = Array.from(gridEl.children)
                .filter(card => !card.classList.contains('matched'));
            
            if (unmatchedCards.length > 0) {
                const hintCards = unmatchedCards
                    .filter(card => card.querySelector('.card-inner').style.backgroundColor === targetColor);
                
                if (hintCards.length > 0) {
                    hintCards.forEach(card => {
                        card.classList.add('hint');
                        setTimeout(() => card.classList.remove('hint'), 1000);
                    });
                    
                    // Penalty for using AI hint
                    score = Math.max(0, score - 10);
                    scoreEl.textContent = score;
                }
            }
        }

        // Enhanced visual and sound feedback
        function playMatchSound() {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(500, audioContext.currentTime);
            gainNode.gain.setValueAtTime(0.5, audioContext.currentTime);

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.1);
        }

        // GSAP animations for more satisfying interactions
        function animateCorrectMatch(card) {
            gsap.to(card, {
                scale: 1.1,
                rotation: 360,
                duration: 0.5,
                ease: "elastic.out(1, 0.3)"
            });
        }

        function animateWrongMatch(card) {
            gsap.to(card, {
                x: [-10, 10, -10, 10, 0],
                duration: 0.3,
                ease: "power1.inOut"
            });
        }

        // Modify existing handleCardClick to include new animations
        function handleCardClick(card, color) {
            if (card.classList.contains('matched')) return;

            if (color === targetColor) {
                playMatchSound();
                card.classList.add('matched');
                animateCorrectMatch(card);
                // Rest of the existing match logic...
            } else {
                animateWrongMatch(card);
                // Rest of the existing wrong match logic...
            }
        }

        // Enhanced modal system
        function showModal(type, score) {
            const modalOverlay = document.getElementById('modal-overlay');
            const modal = document.getElementById('modal');
            const modalTitle = document.getElementById('modal-title');
            const modalDescription = document.getElementById('modal-description');
            const modalScore = document.getElementById('modal-score');
            const modalAction = document.getElementById('modal-action');

            if (type === 'gameOver') {
                modalTitle.textContent = 'Game Over!';
                modalDescription.textContent = 'Your color matching skills have been tested.';
                modalScore.textContent = score;
                modalAction.textContent = 'Play Again';
                modalAction.onclick = () => {
                    modalOverlay.classList.add('hidden');
                    initGame();
                };
            } else if (type === 'levelUp') {
                modalTitle.textContent = 'Level Up!';
                modalDescription.textContent = 'Your color perception is improving!';
                modalScore.textContent = `Level ${level}`;
                modalAction.textContent = 'Continue';
                modalAction.onclick = () => {
                    modalOverlay.classList.add('hidden');
                    initGame();
                };
            }

            modalOverlay.classList.remove('hidden');
            gsap.from(modal, {
                scale: 0.7,
                opacity: 0,
                duration: 0.5,
                ease: "back.out(1.7)"
            });
        }

        // Modify existing gameOver and levelUp functions to use new modal
        function gameOver() {
            clearInterval(gameInterval);
            showModal('gameOver', score);
        }

        function levelUp() {
            clearInterval(gameInterval);
            showModal('levelUp');
        }
    </script>
    <style>
        .card.hint {
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
    </style>
</body>
</html>